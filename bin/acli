#!/usr/bin/env php
<?php

/**
 * @file
 * Acquia CLI command line front file.
 *
 * This is largely based on the default bin/console command that ships with a
 * Symfony app. However, it's been modified to not rely on the Framework Bundle,
 * which spares us from unnecessary dependencies such as the routing layer.
 *
 * ORCA does something similar.
 *
 * @see https://github.com/TravisCarden/stackoverflow-a-50356503
 */

namespace Acquia\Cli;

use Acquia\Cli\Command\Acsf\AcsfApiBaseCommand;
use Acquia\Cli\Command\Acsf\AcsfCommandFactory;
use Acquia\Cli\Command\Api\ApiBaseCommand;
use Acquia\Cli\Command\Api\ApiCommandFactory;
use Acquia\Cli\Command\Api\ApiCommandHelper;
use Acquia\Cli\Exception\AcquiaCliException;
use Acquia\Cli\Helpers\LocalMachineHelper;
use SelfUpdate\SelfUpdateCommand;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;

if (!in_array(PHP_SAPI, ['cli', 'phpdbg', 'embed'], true)) {
  echo 'Warning: The console should be invoked via the CLI version of PHP, not the '.PHP_SAPI.' SAPI'.PHP_EOL;
}

set_time_limit(0);

if (isset($_composer_autoload_path)) {
  $loader = require $_composer_autoload_path;
}
else {
  $autoload_locations = [
    dirname(__DIR__) . '/vendor/autoload.php',
    dirname(__DIR__) . '/../../autoload.php',
  ];
  foreach ($autoload_locations as $autoload_location) {
    if (file_exists($autoload_location)) {
      $loader = require $autoload_location;
      break;
    }
  }
}
if (!isset($loader)) {
    throw new AcquiaCliException('Unable to find autoload.php');
}
// We must pre-load this class to prevent self-update command from breaking.
// @see https://github.com/acquia/cli/issues/234
$loader->loadClass('Symfony\Component\Console\Event\ConsoleTerminateEvent');
$input = new ArgvInput();

// On some environments (looking at you, Windows), HOME may not be set.
if (!getenv('HOME')) {
    putenv('HOME=' . LocalMachineHelper::getHomeDir());
}
$kernel = new Kernel('prod', false);

// Handle a clear-kernel-cache pseudo command. This isn't implemented as a true console
// command because a stale or corrupted cache would render it unusable--
// precisely when it is needed.
if (in_array($input->getFirstArgument(), ['clear-kernel-cache', 'ckc'])) {
  $filesystem = new Filesystem();
  $kernel_cache_dir = $kernel->getCacheDir();
  $filesystem->remove([$kernel_cache_dir]);
  $filesystem->mkdir($kernel_cache_dir);
  $filesystem->touch("{$kernel_cache_dir}/.gitkeep");
  exit;
}

$kernel->boot();
$container = $kernel->getContainer();

if (!getenv('ACLI_REPO_ROOT')) {
  putenv("ACLI_REPO_ROOT=" . LocalMachineHelper::getProjectRoot());
}
/** @var Application $application */
$application = $container->get(Application::class);
/** @var OutputInterface $output */
$output = $container->get(OutputInterface::class);
$application->setName('Acquia CLI');
$application->setVersion('@package_version@');
/** @var ApiCommandHelper $helper */
$helper = $container->get(ApiCommandHelper::class);
$application->addCommands($helper->getApiCommands( __DIR__ . '/../assets/acquia-spec.yaml', 'api', $container->get(ApiCommandFactory::class)));
$application->addCommands($helper->getApiCommands( __DIR__ . '/../assets/acsf-spec.yaml', 'acsf', $container->get(AcsfCommandFactory::class)));
$application->add(new SelfUpdateCommand($application->getName(), $application->getVersion(), 'acquia/cli'));

$application->run($input, $output);