#!/usr/bin/env php
<?php

/**
 * @file
 * Acquia CLI command line front file.
 *
 * This is largely based on the default bin/console command that ships with a
 * Symfony app. However, it's been modified to not rely on the Framework Bundle,
 * which spares us from unnecessary dependencies such as the routing layer.
 *
 * ORCA does something similar.
 *
 * @see https://github.com/TravisCarden/stackoverflow-a-50356503
 */

namespace Acquia\Cli;

use Acquia\Cli\Command\Api\ApiCommandHelper;
use Acquia\Cli\Helpers\LocalMachineHelper;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Dotenv\Dotenv;
use Symfony\Component\ErrorHandler\Debug;
use Symfony\Component\Filesystem\Filesystem;
use Webmozart\PathUtil\Path;

if (!in_array(PHP_SAPI, ['cli', 'phpdbg', 'embed'], true)) {
  echo 'Warning: The console should be invoked via the CLI version of PHP, not the '.PHP_SAPI.' SAPI'.PHP_EOL;
}

set_time_limit(0);

require dirname(__DIR__).'/vendor/autoload.php';

$input = new ArgvInput();
if (null !== $env = $input->getParameterOption(['--env', '-e'], null, true)) {
  putenv('APP_ENV='.$_SERVER['APP_ENV'] = $_ENV['APP_ENV'] = $env);
}

if ($input->hasParameterOption('--no-debug', true)) {
  putenv('APP_DEBUG='.$_SERVER['APP_DEBUG'] = $_ENV['APP_DEBUG'] = '0');
}

(new Dotenv())->bootEnv(dirname(__DIR__).'/.env');

if ($_SERVER['APP_DEBUG']) {
  umask(0000);

  if (class_exists(Debug::class)) {
    Debug::enable();
  }
}

// On some environments (looking at you, Windows), HOME may not be set.
if (!getenv('HOME')) {
    putenv('HOME=' . LocalMachineHelper::getHomeDir());
}

$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);

// Handle a cache:clear pseudo command. This isn't implemented as a true console
// command because a stale or corrupted cache would render it unusable--
// precisely when it is needed.
if (in_array($input->getFirstArgument(), ['cache:clear', 'cc'])) {
  $filesystem = new Filesystem();
  $kernel_cache_dir = $kernel->getCacheDir();
  $system_cache_dir = Path::join(sys_get_temp_dir(), 'symphony-cache');
  $filesystem->remove([$kernel_cache_dir, $system_cache_dir]);
  $filesystem->mkdir($kernel_cache_dir);
  $filesystem->touch("{$kernel_cache_dir}/.gitkeep");
  exit;
}

$kernel->boot();
$container = $kernel->getContainer();
putenv("ACLI_REPO_ROOT=" . find_repo_root());
// Register custom progress bar format.
ProgressBar::setFormatDefinition(
  'message',
  "%current%/%max% [%bar%] <info>%percent:3s%%</info> -- %elapsed:6s%/%estimated:-6s%\n %message%"
);
/** @var Application $application */
$application = $container->get(Application::class);
$application->setName('Acquia CLI');
$application->setVersion('@package_version@');
/** @var \Acquia\Cli\Command\Api\ApiCommandHelper $helper */
$helper = $container->get(ApiCommandHelper::class);
$application->addCommands($helper->getApiCommands());
$application->run();

/**
 * Finds the root directory for the repository.
 *
 * @return null|string
 *   Root.
 */
function find_repo_root() {
  $possible_repo_roots = [
    getcwd(),
  ];
  // Check for PWD - some local environments will not have this key.
  if (isset($_SERVER['PWD']) && !in_array($_SERVER['PWD'], $possible_repo_roots, TRUE)) {
    array_unshift($possible_repo_roots, $_SERVER['PWD']);
  }
  foreach ($possible_repo_roots as $possible_repo_root) {
    if ($repo_root = find_directory_containing_files($possible_repo_root, ['docroot/index.php'])) {
      return realpath($repo_root);
    }
  }

  return NULL;
}

/**
 * Traverses file system upwards in search of a given file.
 *
 * Begins searching for $file in $working_directory and climbs up directories
 * $max_height times, repeating search.
 *
 * @param string $working_directory
 *   Working directory.
 * @param array $files
 *   Files.
 * @param int $max_height
 *   Max Height.
 *
 * @return bool|string
 *   FALSE if file was not found. Otherwise, the directory path containing the
 *   file.
 */
function find_directory_containing_files($working_directory, array $files, $max_height = 10) {
  // Find the root directory of the git repository containing BLT.
  // We traverse the file tree upwards $max_height times until we find
  // vendor/bin/blt.
  $file_path = $working_directory;
  for ($i = 0; $i <= $max_height; $i++) {
    if (files_exist($file_path, $files)) {
      return $file_path;
    }

    $file_path = dirname($file_path) . '';
  }

  return FALSE;
}

/**
 * Determines if an array of files exist in a particular directory.
 *
 * @param string $dir
 *   Dir.
 * @param array $files
 *   Files.
 *
 * @return bool
 *   Exists.
 */
function files_exist($dir, array $files) {
  foreach ($files as $file) {
    if (file_exists(Path::join($dir, $file))) {
      return TRUE;
    }
  }

  return FALSE;
}
