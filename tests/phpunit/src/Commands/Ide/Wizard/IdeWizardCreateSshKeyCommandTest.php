<?php

namespace Acquia\Cli\Tests\Commands\Ide\Wizard;

use Acquia\Cli\Command\Ide\Wizard\IdeWizardCreateSshKeyCommand;
use Acquia\Cli\Helpers\LocalMachineHelper;
use Acquia\Cli\Helpers\SshHelper;
use AcquiaCloudApi\Response\EnvironmentResponse;
use AcquiaCloudApi\Response\IdeResponse;
use Prophecy\Argument;
use Psr\Http\Message\ResponseInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Process\Process;

/**
 * Class IdeWizardCreateSshKeyCommandTest.
 *
 * @property \Acquia\Cli\Command\Ide\Wizard\IdeWizardCreateSshKeyCommand $command
 * @package Acquia\Cli\Tests\Ide
 */
class IdeWizardCreateSshKeyCommandTest extends IdeWizardTestBase {

  /**
   * Tests the 'ide:wizard:ssh-key:create' command.
   *
   * @throws \Psr\Cache\InvalidArgumentException
   */
  public function testCreate(): void {
    $cloud_client = $this->getMockClient();
    $application_response = $this->mockApplicationRequest($cloud_client);
    $ssh_key_list_response = $this->mockListSshKeysRequest($cloud_client);

    // Request for IDE data.
    $ide_response = $this->getMockResponseFromSpec('/ides/{ideUuid}', 'get', '200');
    $cloud_client->request('get', '/ides/' . $this->remote_ide_uuid)->willReturn($ide_response)->shouldBeCalled();

    // Request for Environments data. This isn't actually the endpoint we should
    // be using, but we do it due to CXAPI-7209.
    $environments_response = $this->getMockResponseFromSpec('/environments/{environmentId}', 'get', '200');
    $cloud_client->request('get', "/applications/{$this->application_uuid}/environments")->willReturn([$environments_response])->shouldBeCalled();

    // Request to upload new SSH key.
    // We create a unique label based on the IDE, not the stock label from the
    // yaml spec example.
    $ide = new IdeResponse((object) $ide_response);
    $options = [
      'form_params' => [
        'label' => $this->command->getIdeSshKeyLabel($ide),
        // We don't know what this will be since it's generated by the
        // ssh-key:create command.
        'public_key' => Argument::type('string')
      ]
    ];
    $response = $this->prophet->prophesize(ResponseInterface::class);
    $response->getStatusCode()->willReturn(202);
    $cloud_client->makeRequest('post', '/account/ssh-keys', Argument::type('array'))->willReturn($response->reveal())->shouldBeCalled();

    $process = $this->prophet->prophesize(Process::class);
    $process->isSuccessful()->willReturn(TRUE);
    $process->getExitCode()->willReturn(0);
    $ssh_helper = $this->prophet->prophesize(SshHelper::class);
    $ssh_helper->executeCommand(
        new EnvironmentResponse($environments_response),
        ['ls'])
      ->willReturn($process->reveal())
      ->shouldBeCalled();
    $this->application->setSshHelper($ssh_helper->reveal());

    $ssh_key_filename = $this->mockCreateSshKey($cloud_client);

    $this->prophet->checkPredictions();

    $this->assertFileExists($this->command->getApplication()->getSshKeysDir() . '/' . $ssh_key_filename);
    $this->assertFileExists($this->command->getApplication()->getSshKeysDir() . '/' . str_replace('.pub', '', $ssh_key_filename));
  }

  /**
   * @return \Acquia\Cli\Command\Ide\Wizard\IdeWizardCreateSshKeyCommand
   */
  protected function createCommand(): Command {
    return new IdeWizardCreateSshKeyCommand();
  }

  // @todo Test that this can only be run inside IDE.

  /**
   * @param $cloud_client
   *
   * @return string
   * @throws \Exception
   */
  protected function mockCreateSshKey($cloud_client): string {
    $ssh_key_filename = $this->command->getSshKeyFilename($this->remote_ide_uuid);
    $this->command->getApplication()->setSshKeysDir(sys_get_temp_dir());
    $this->application->setAcquiaCloudClient($cloud_client->reveal());
    $this->executeCommand([], [
      // Would you like to link the project at ... ?
      'y',
    ]);
    return $ssh_key_filename;
  }

}
